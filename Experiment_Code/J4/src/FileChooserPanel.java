import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.Transferable;
import java.awt.dnd.DnDConstants;
import java.awt.dnd.DropTargetDragEvent;
import java.awt.dnd.DropTargetDropEvent;
import java.awt.dnd.DropTargetEvent;

/*
 * FileChooserPanel.java
 *
 * Created on 21 May 2007, 09:53
 */
import java.io.File;
import javax.swing.JFileChooser;

/**
 *
 * @author  Kreecha Puphaiboon
 */
public class FileChooserPanel extends javax.swing.JPanel implements java.awt.dnd.DropTargetListener {
    private JPowder jpowder;
    
    /** Creates new form FileChooserPanel 
     * @param jp JPowder 
     */
    public FileChooserPanel(JPowder jp) {
        jpowder = jp;
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        file_sp = new javax.swing.JScrollPane();
        file_lst = new javax.swing.JList();

        //create a list model to put in the JList
        listModel = new javax.swing.DefaultListModel();
        //listModel.addElement("BM16_C6-H6-N6-O4_H2O.xye");
        //listModel.addListDataListener(new MyListDataListener());

        file_lst.setModel(listModel);
        file_lst.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        file_lst.addListSelectionListener(this);//list selction
        addFile_btn = new javax.swing.JButton();
        deleteFile_btn = new javax.swing.JButton();

        setLayout(new java.awt.GridBagLayout());

        file_sp.setMinimumSize(new java.awt.Dimension(260, 84));
        file_sp.setPreferredSize(new java.awt.Dimension(260, 84));

        file_lst.setFont(new java.awt.Font("Tahoma", 0, 10));
        file_lst.setMinimumSize(new java.awt.Dimension(210, 84));
        file_lst.setPreferredSize(new java.awt.Dimension(210, 84));
        file_sp.setViewportView(file_lst);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 0);
        add(file_sp, gridBagConstraints);

        addFile_btn.setFont(new java.awt.Font("Tahoma", 0, 10));
        addFile_btn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/addFile.gif"))); // NOI18N
        addFile_btn.setText("Add file");
        addFile_btn.setToolTipText("Add file");
        addFile_btn.setMaximumSize(new java.awt.Dimension(120, 23));
        addFile_btn.setMinimumSize(new java.awt.Dimension(120, 23));
        addFile_btn.setPreferredSize(new java.awt.Dimension(120, 23));
        addFile_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addFile_btnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 2);
        add(addFile_btn, gridBagConstraints);

        deleteFile_btn.setFont(new java.awt.Font("Tahoma", 0, 10));
        deleteFile_btn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/del_small.gif"))); // NOI18N
        deleteFile_btn.setText("Delete file");
        deleteFile_btn.setToolTipText("Delete file");
        deleteFile_btn.setEnabled(false);
        deleteFile_btn.setMaximumSize(new java.awt.Dimension(50, 23));
        deleteFile_btn.setMinimumSize(new java.awt.Dimension(50, 23));
        deleteFile_btn.setPreferredSize(new java.awt.Dimension(50, 23));
        deleteFile_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteFile_btnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 2);
        add(deleteFile_btn, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    /** ALL DRAGE AND DROP THING */
    public void dragEnter(java.awt.dnd.DropTargetDragEvent dtde) {
        System.out.println("Drag Enter");
    }
    
    public void dragExit(java.awt.dnd.DropTargetEvent dte) {
        System.out.println("Source: " + dte.getSource());
        System.out.println("Drag Exit");
    }
    
    public void dragOver(java.awt.dnd.DropTargetDragEvent dtde) {
        //System.out.println("Drag Over");
    }
    
    public void dropActionChanged(java.awt.dnd.DropTargetDragEvent dtde) {
        System.out.println("Drop Action Changed");
    }
    
    public void drop(java.awt.dnd.DropTargetDropEvent dtde) {
        try {
            // Ok, get the dropped object and try to figure out what it is
            Transferable tr = dtde.getTransferable();
            DataFlavor[] flavors = tr.getTransferDataFlavors();
            
            for (int i = 0; i < flavors.length; i++) {
                System.out.println("Possible flavor: " + flavors[i].getMimeType());
                // Check for file lists specifically
                if (flavors[i].isFlavorJavaFileListType()) {
                    // Great!  Accept copy drops...
                    dtde.acceptDrop(DnDConstants.ACTION_COPY);
                    System.out.println("Successful file list drop.\n\n");
                    
                    // And add the list of file names to our text area
                    java.util.List list = (java.util.List)tr.getTransferData(flavors[i]);
                    
                    for (int j = 0; j < list.size(); j++) {
                        File file = (File)list.get(j);
                        String fileName = file.getName().toLowerCase();
                        
                        if (jpowder.checkAcceptedFileType(fileName)){
                            jpowder.data = ReadWriteFileUtil.getLocalFileToTable(file, jpowder);
                            if(jpowder.data != null){
                                jpowder.currentFileName = fileName;
                                jpowder.drawTable(jpowder.data);
                                jpowder.fileToReadVector.addElement(file);//was filename (String type)
                                jpowder.listModel.addElement(fileName);//add to DefaultListModel
                            }
                        } else {
                            javax.swing.JOptionPane.showMessageDialog(jpowder, "Only ASCII file please.");
                            //end if extension matched
                        }                   
                    }
           
                    // If we made it this far, everything worked.
                    dtde.dropComplete(true);
                    return;
                }
            }
            // Hmm, the user must not have dropped a file list
            System.out.println("Drop failed: " + dtde);
            dtde.rejectDrop();
        } catch (Exception e) {
            e.printStackTrace();
            dtde.rejectDrop();
        }
    }
    //END ALL DRAGE AND DROP
    
private void deleteFile_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteFile_btnActionPerformed
    //if no nothing selected then alert.
    if (file_lst.getSelectedIndex() == -1) {
        javax.swing.JOptionPane.showMessageDialog(jpowder, "To delete, please select a file first.");
        return;
    }
    
    //if the list is empty then do nothing
    if (jpowder.listModel.getSize() <= 0) {
        javax.swing.JOptionPane.showMessageDialog(jpowder, "Please add a file first.");
        return;
    }
    
    //do the actual deletion.
    if (jpowder.listModel.getSize() > 0){
        int index = file_lst.getSelectedIndex();
        jpowder.listModel.removeElementAt(index);
        jpowder.fileToReadVector.removeElementAt(index);
    }
}//GEN-LAST:event_deleteFile_btnActionPerformed

private void addFile_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addFile_btnActionPerformed
    // Browse for a file on user machine
    // Create a list of files to be choosen and keep the actual data in fileToReadVector.
    // restrict to .xye to be read.
    
    final JFileChooser fc = new JFileChooser();
    fc.addChoosableFileFilter(new AcceptFileFilter(ACCEPTED_FILE_TYPE, "ASCII file (*.xye, *.txt)"));
    fc.setAcceptAllFileFilterUsed(false);//only ASCII will be seen.
    
    int returnVal = fc.showOpenDialog(JPowder.this);
    
    if (returnVal == JFileChooser.APPROVE_OPTION) {
        File file = fc.getSelectedFile();
        String filename = file.getName().toLowerCase();
        
        //This is a real application would restrict to 'xye'.
        if (jpowder.checkAcceptedFileType(filename)){
            this.data = ReadWriteFileUtil.getLocalFileToTable(file, this);
            if(this.data != null){
                currentFileName = filename;
                drawTable(this.data);
                fileToReadVector.addElement(file);//was filename (String type)
                listModel.addElement(filename);//add to DefaultListModel
            }
        } else {
            javax.swing.JOptionPane.showMessageDialog(JPowder.this, "Only ASCII file please.");
            //end if extension matched
        }
    } else {
        LogPanel.addLogText("\nOpen file command cancelled by user.");
    }
}//GEN-LAST:event_addFile_btnActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addFile_btn;
    private javax.swing.JButton deleteFile_btn;
    private javax.swing.JList file_lst;
    private javax.swing.JScrollPane file_sp;
    // End of variables declaration//GEN-END:variables
    
}
