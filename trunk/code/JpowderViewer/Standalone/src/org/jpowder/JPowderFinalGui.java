/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * JPowderFinalGui.java
 *
 * Created on 05-Oct-2009, 09:57:11
 */

package org.jpowder;

import java.awt.Dimension;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectOutput;
import java.io.ObjectOutputStream;
import java.util.HashMap;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.jpowder.dataset.DataSet;
import org.jpowder.dataset.DatasetPlotter;
import org.jpowder.fileCabinet.PowderFileCabinet;
import org.jpowder.util.ScreenUtil;
import org.jpowder.util.Stopwatch;

/**
 *
 * @author qyt21516
 */
public class JPowderFinalGui extends javax.swing.JFrame implements org.jpowder.fileCabinet.PowderFileObserver {

 private FileChooserPanel fileChooserPanel = new FileChooserPanel(this);

    private static final int CHART_HEIGHT_FIX_SIZE=30 ;


    private PowderFileCabinet mPowderFileCabinet;


    public void powderFileCabinetUpdate(org.jpowder.fileCabinet.Subject data) {
        org.jpowder.fileCabinet.PowderFileCabinet pfc = (org.jpowder.fileCabinet.PowderFileCabinet) data;


        // comment: update to a bigger size by getting the current size and add some amount.
       /**
        java.awt.Dimension area = ChartPlotter.getSize();
        area.height = area.height+( CHART_HEIGHT_FIX_SIZE);
        ChartPlotter.setLayout(new javax.swing.BoxLayout(ChartPlotter, javax.swing.BoxLayout.Y_AXIS));
        ChartPlotter.setPreferredSize(area);
*/
        HashMap<String, DataSet> allData = pfc.getData();

        // Get new dataset
        String fileName = pfc.getLastUpdateFileName();
        DataSet lastAddedDataset = allData.get(fileName);

         Stopwatch lStopwatch = new Stopwatch();
         lStopwatch.start();
        DatasetPlotter plot = DatasetPlotter.createDatasetPlotter(lastAddedDataset);
        
//creating the internal frame here
      javax.swing.JPanel chartpanels = new javax.swing.JPanel(); 
      chartpanels.add(plot.createPowderChart());
       Internalframe internalframe = new Internalframe(chartpanels);
         ChartPlotter.add(internalframe);

        System.out.println("\nTime it took to create chart " + fileName);
                System.out.println(lStopwatch.getElapsedTime());
                lStopwatch.reset();
        // add seperator
        JPanel seperatePanel = new JPanel();
        //seperatePanel.setBackground(new java.awt.Color(240, 240, 240));
        seperatePanel.setMinimumSize(new Dimension(550, 4));
        seperatePanel.setPreferredSize(new Dimension(550, 4));
        seperatePanel.setMaximumSize(new Dimension(550, 4));
        ChartPlotter.add(seperatePanel);
        ChartPlotter.revalidate();

        java.awt.Rectangle rect = ChartPlotter.getBounds();
        //chart_scrp.getVerticalScrollBar().setValue(rect.height);
    }// powderFileCabinetUpdate

    /**
     * JVM starting point
     *
     * @param args
     */
    public JPanel getChartPanel() {
        return this.ChartPlotter;
    }

    public JPowderFinalGui() {

      mPowderFileCabinet = new PowderFileCabinet();
      mPowderFileCabinet.registerObserver(this);
        try {
            javax.swing.UIManager.setLookAndFeel(javax.swing.UIManager.getSystemLookAndFeelClassName());
        } catch (Exception e) {
            javax.swing.JOptionPane.showMessageDialog(this, e.getMessage());
        }
        initComponents();
        home.add(fileChooserPanel);
        fileChooserPanel.setVisible(true);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    jSplitPane1 = new javax.swing.JSplitPane();
    Chart = new javax.swing.JPanel();
    chart_scrp = new javax.swing.JScrollPane();
    ChartPlotter = new javax.swing.JPanel();
    chartpanels = new javax.swing.JPanel();
    home = new javax.swing.JPanel();
    jMenuBar1 = new javax.swing.JMenuBar();
    jMenu1 = new javax.swing.JMenu();
    New = new javax.swing.JMenuItem();
    Open = new javax.swing.JMenuItem();
    Save = new javax.swing.JMenuItem();
    Exit = new javax.swing.JMenuItem();
    jMenu2 = new javax.swing.JMenu();
    Content = new javax.swing.JMenuItem();
    OnlieDocsandSupport = new javax.swing.JMenuItem();
    About = new javax.swing.JMenuItem();

    setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
    setTitle("JPowder Crystallography Demo");
    setLocationByPlatform(true);

    jSplitPane1.setDividerLocation(300);
    jSplitPane1.setDividerSize(8);

    Chart.setBorder(javax.swing.BorderFactory.createTitledBorder("Chart"));

    chart_scrp.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
    chart_scrp.setAutoscrolls(true);
    chart_scrp.setMinimumSize(new java.awt.Dimension(0, 0));

    ChartPlotter.setBorder(javax.swing.BorderFactory.createTitledBorder("Chartplot"));

    javax.swing.GroupLayout chartpanelsLayout = new javax.swing.GroupLayout(chartpanels);
    chartpanels.setLayout(chartpanelsLayout);
    chartpanelsLayout.setHorizontalGroup(
      chartpanelsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 100, Short.MAX_VALUE)
    );
    chartpanelsLayout.setVerticalGroup(
      chartpanelsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 100, Short.MAX_VALUE)
    );

    ChartPlotter.add(chartpanels);

    chart_scrp.setViewportView(ChartPlotter);

    javax.swing.GroupLayout ChartLayout = new javax.swing.GroupLayout(Chart);
    Chart.setLayout(ChartLayout);
    ChartLayout.setHorizontalGroup(
      ChartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(ChartLayout.createSequentialGroup()
        .addContainerGap()
        .addComponent(chart_scrp, javax.swing.GroupLayout.DEFAULT_SIZE, 0, Short.MAX_VALUE)
        .addContainerGap())
    );
    ChartLayout.setVerticalGroup(
      ChartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(ChartLayout.createSequentialGroup()
        .addContainerGap()
        .addComponent(chart_scrp, javax.swing.GroupLayout.DEFAULT_SIZE, 484, Short.MAX_VALUE)
        .addContainerGap())
    );

    jSplitPane1.setRightComponent(Chart);
    jSplitPane1.setLeftComponent(home);

    jMenu1.setText("File");

    New.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
    New.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/new_small.gif"))); // NOI18N
    New.setText("New...");
    New.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        NewActionPerformed(evt);
      }
    });
    jMenu1.add(New);

    Open.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
    Open.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/addFile.gif"))); // NOI18N
    Open.setText("Open");
    Open.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        OpenActionPerformed(evt);
      }
    });
    jMenu1.add(Open);

    Save.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
    Save.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/savas_small.gif"))); // NOI18N
    Save.setText("Save");
    Save.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        SaveActionPerformed(evt);
      }
    });
    jMenu1.add(Save);

    Exit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_MASK));
    Exit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/del_small.gif"))); // NOI18N
    Exit.setText("Exit");
    Exit.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        ExitActionPerformed(evt);
      }
    });
    jMenu1.add(Exit);

    jMenuBar1.add(jMenu1);

    jMenu2.setText("Help");

    Content.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, 0));
    Content.setText("Content");
    jMenu2.add(Content);

    OnlieDocsandSupport.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F2, java.awt.event.InputEvent.CTRL_MASK));
    OnlieDocsandSupport.setText("Online Docs and Support");
    OnlieDocsandSupport.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        OnlieDocsandSupportActionPerformed(evt);
      }
    });
    jMenu2.add(OnlieDocsandSupport);

    About.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
    About.setText("About");
    About.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        AboutActionPerformed(evt);
      }
    });
    jMenu2.add(About);

    jMenuBar1.add(jMenu2);

    setJMenuBar(jMenuBar1);

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 840, Short.MAX_VALUE)
        .addContainerGap())
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 538, Short.MAX_VALUE)
        .addContainerGap())
    );

    pack();
  }// </editor-fold>//GEN-END:initComponents

    private void OnlieDocsandSupportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OnlieDocsandSupportActionPerformed
       Runtime rt = Runtime.getRuntime();
        String[] callAndArgs = {"explorer.exe",
            "http://code.google.com/p/jpowder"};
        try {

            Process poress = rt.exec(callAndArgs);
        } catch (IOException e) {
          JOptionPane.showMessageDialog(this, "No Internet Conection!",
                    "error", JOptionPane.ERROR_MESSAGE);

        }
    }//GEN-LAST:event_OnlieDocsandSupportActionPerformed

    private void AboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AboutActionPerformed
    new about().setVisible(true);
    }//GEN-LAST:event_AboutActionPerformed

    private void ExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitActionPerformed
       int res = JOptionPane.showConfirmDialog(null, "Do you want to exit?", "JPowderFinalGui",
                JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);
        switch (res) {
            case JOptionPane.YES_OPTION:
                System.exit(0);
                break;
            case JOptionPane.NO_OPTION:
                break;
            case JOptionPane.CANCEL_OPTION:
                break;
            case JOptionPane.CLOSED_OPTION:
                break;
        }
    }//GEN-LAST:event_ExitActionPerformed

    private void OpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpenActionPerformed
      mPowderFileCabinet.loadFiles();
    }//GEN-LAST:event_OpenActionPerformed

    private void SaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveActionPerformed
        boolean[] JPowder = new boolean[16654];
      for (int i=0; i<16654;i++){
      }

    JFileChooser chooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter(
                ".ISIS ", "ISIS");

        chooser.setFileFilter(filter);

        int returnVal = chooser.showSaveDialog(chooser);
        File fileName = chooser.getSelectedFile();
        if (returnVal == JFileChooser.APPROVE_OPTION)
          try {
            FileOutputStream buffer = new FileOutputStream(fileName);
            final ObjectOutput out = new ObjectOutputStream(buffer);
            out.writeObject(JPowder);


          } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Invalid file!",
                    "error", JOptionPane.ERROR_MESSAGE);
          }
    }//GEN-LAST:event_SaveActionPerformed

    private void NewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NewActionPerformed
     JPowderFinalGui jpowderfinalgui = new JPowderFinalGui();
     ScreenUtil.centerFrame(jpowderfinalgui);
     jpowderfinalgui.setVisible(true);

    }//GEN-LAST:event_NewActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JPowderFinalGui().setVisible(true);
                
            }
        });
    }

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JMenuItem About;
  private javax.swing.JPanel Chart;
  private javax.swing.JPanel ChartPlotter;
  private javax.swing.JMenuItem Content;
  private javax.swing.JMenuItem Exit;
  private javax.swing.JMenuItem New;
  private javax.swing.JMenuItem OnlieDocsandSupport;
  private javax.swing.JMenuItem Open;
  private javax.swing.JMenuItem Save;
  private javax.swing.JScrollPane chart_scrp;
  private javax.swing.JPanel chartpanels;
  private javax.swing.JPanel home;
  private javax.swing.JMenu jMenu1;
  private javax.swing.JMenu jMenu2;
  private javax.swing.JMenuBar jMenuBar1;
  private javax.swing.JSplitPane jSplitPane1;
  // End of variables declaration//GEN-END:variables

 
}
