/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Peack.java
 *
 * Created on 26-Nov-2009, 11:32:11
 */
package org.jpowder.Analysis;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.Vector;
import javax.swing.DefaultListModel;
import javax.swing.JPopupMenu;
import javax.swing.SwingUtilities;


import org.jpowder.InfoPanel;
import org.jpowder.JPowder;
import org.jpowder.JpowderInternalframe;

/**
 *
 * @author
 */
public class MarkPeakPosition extends javax.swing.JPanel implements InfoPanel, MouseListener {

  private AnalysisIcon analysisIcon;
  private DefaultListModel listModel;
  private int counter;
//  private String[] strings;

  /** Creates new form Peack */
  public MarkPeakPosition(AnalysisIcon analysisIcon) {
    initComponents();
    this.analysisIcon = analysisIcon;
  }

  public void update() {
  }

  public void mouseClicked(MouseEvent e) {
  
    System.out.println("i have been clicked");
    JpowderInternalframe inFocus = JPowder.internalFrameInFocus;
    MaxY.setText(Double.toString(inFocus.getXYPlot().getRangeCrosshairValue()));
    Max2theta.setText(Double.toString(inFocus.getXYPlot().getDomainCrosshairValue()));

    if(inFocus.getXYPlot().getDomainCrosshairValue()!=0){
    inFocus.addMarkedPeakPosition(inFocus.getXYPlot().getDomainCrosshairValue());
    }
    
    if(inFocus.getXYPlot().getDomainCrosshairValue()!=inFocus.getXYPlot().getDomainCrosshairValue()){
    inFocus.addMarkedPeakPosition(inFocus.getXYPlot().getDomainCrosshairValue());
    }

    final String[] strings = convertDoubleToString(inFocus.getMarkedPeakPosition());
    jList1.setModel(new javax.swing.AbstractListModel() {

      public int getSize() {
        return strings.length;
      }

      public Object getElementAt(int i) {
        return strings[i];
      }
    });

  }

  public void mousePressed(MouseEvent e) {
  }

  public void mouseReleased(MouseEvent e) {
  }

  public void mouseEntered(MouseEvent e) {
  }

  public void mouseExited(MouseEvent e) {
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jlistPopupMenu1 = new javax.swing.JPopupMenu();
        Copy = new javax.swing.JMenuItem();
        Clear = new javax.swing.JMenuItem();
        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        Back = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        Max2theta = new javax.swing.JLabel();
        MaxY = new javax.swing.JLabel();
        jToggleButton1 = new javax.swing.JToggleButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();

        Copy.setText("Copy");
        Copy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CopyActionPerformed(evt);
            }
        });
        jlistPopupMenu1.add(Copy);
        jlistPopupMenu1.add(new JPopupMenu.Separator());

        Clear.setText("Clear");
        Clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClearActionPerformed(evt);
            }
        });
        jlistPopupMenu1.add(Clear);

        setMaximumSize(new java.awt.Dimension(274, 362));
        setPreferredSize(new java.awt.Dimension(274, 362));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setText("Mark The Peak Position");

        jScrollPane1.setViewportBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(240, 240, 240)));

        jTextArea1.setBackground(new java.awt.Color(236, 233, 216));
        jTextArea1.setColumns(20);
        jTextArea1.setEditable(false);
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(5);
        jTextArea1.setText("Click on the Check Box to change the plotted data in the frame which is in focus.");
        jTextArea1.setWrapStyleWord(true);
        jTextArea1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(240, 240, 240), 1, true));
        jTextArea1.setOpaque(false);
        jScrollPane1.setViewportView(jTextArea1);

        Back.setText("Back");
        Back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackActionPerformed(evt);
            }
        });

        jLabel2.setText(" Peak 2Î˜ :");

        jLabel3.setText(" Max   Y   :");

        Max2theta.setForeground(new java.awt.Color(255, 0, 0));

        MaxY.setForeground(new java.awt.Color(255, 0, 0));

        jToggleButton1.setText("Get Peak ");
        jToggleButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton1ActionPerformed(evt);
            }
        });

        jList1.setForeground(new java.awt.Color(255, 0, 0));
        jList1.setDragEnabled(true);
        jList1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jList1MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jList1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel1)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jLabel3))
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addGroup(layout.createSequentialGroup()
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(MaxY, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(4, 4, 4)
                                                .addComponent(Max2theta, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                        .addGap(6, 6, 6))
                                    .addComponent(jToggleButton1))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(94, 94, 94)
                .addComponent(Back)
                .addContainerGap(107, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jToggleButton1)
                        .addGap(7, 7, 7)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(Max2theta, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(MaxY, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(Back)
                .addGap(50, 50, 50))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void BackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackActionPerformed

      System.out.println("backbut is clicked");
      analysisIcon.setComponentZOrder(this, 0);
      analysisIcon.setVisible(true);
    }//GEN-LAST:event_BackActionPerformed

    private void jToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton1ActionPerformed

      JpowderInternalframe inFocus = JPowder.internalFrameInFocus;
      inFocus.getChartPanel().addMouseListener(this);
      inFocus.getChartPanel().setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
      //Domain
      inFocus.getXYPlot().setDomainCrosshairVisible(true);
      inFocus.getXYPlot().setDomainCrosshairLockedOnData(true);
      inFocus.getXYPlot().setDomainCrosshairStroke(new BasicStroke(1f));
      inFocus.getXYPlot().setDomainCrosshairPaint(Color.ORANGE);
      inFocus.getChartPanel().setHorizontalAxisTrace(true);

      //Range
      inFocus.getXYPlot().setRangeCrosshairVisible(true);
      inFocus.getXYPlot().setRangeCrosshairLockedOnData(true);
      inFocus.getXYPlot().setRangeCrosshairStroke(new BasicStroke(1f));
      inFocus.getXYPlot().setRangeCrosshairPaint(Color.ORANGE);
      inFocus.getChartPanel().setVerticalAxisTrace(true);

      if (jToggleButton1.isSelected()) {
        MaxY.setText(Double.toString(inFocus.getXYPlot().getRangeCrosshairValue()));
        Max2theta.setText(Double.toString(inFocus.getXYPlot().getDomainCrosshairValue()));


      }
      if (!jToggleButton1.isSelected()) {
        MaxY.setText(null);
        Max2theta.setText(null);
        //Domain
        inFocus.getXYPlot().setDomainCrosshairVisible(false);
        inFocus.getChartPanel().setHorizontalAxisTrace(false);
        inFocus.getXYPlot().setDomainCrosshairLockedOnData(false);
        //Range
        inFocus.getXYPlot().setRangeCrosshairVisible(false);
        inFocus.getChartPanel().setVerticalAxisTrace(false);
        inFocus.getXYPlot().setRangeCrosshairLockedOnData(false);

      }


      /**
      XYDataset dataset = inFocus.getXYPlot().getDataset();
      ValueAxis domainAxis = inFocus.getXYPlot().getDomainAxis();
      ValueAxis rangeAxis = inFocus.getXYPlot().getRangeAxis();
      inFocus.getXYPlot().setRangeAxis(rangeAxis);
      inFocus.getXYPlot().setDomainAxis(domainAxis);
      System.out.println("dataset: "+inFocus.getXYPlot().getDataRange(rangeAxis));
      System.out.println("dataset: "+  inFocus.getXYPlot().getDataRange(domainAxis));
      List chartList = new Vector();
      Vector<Double> tX = new Vector();
      Vector<Double> tY = new Vector();
      int seriescount = inFocus.getXYPlot().getSeriesCount();
      for (int seriesindex = 0; seriesindex < seriescount; seriesindex++) {
      for (int itemindex = 0; itemindex < dataset.getItemCount(seriesindex); itemindex++) {
      tX.add(dataset.getXValue(seriesindex, itemindex));
      tY.add(dataset.getYValue(seriesindex, itemindex));
      }
      chartList.add(tX);
      chartList.add(tY);
      }
      Double maxRange = Collections.max(tY);
      int pos = tY.indexOf(Double.parseDouble(maxRange.toString()));//not found
      Marker peakRangeMarker = new ValueMarker(Double.parseDouble(
      maxRange.toString()));
      peakRangeMarker.setStroke(new BasicStroke(1.4f));
      peakRangeMarker.setPaint(Color.yellow);
      peakRangeMarker.setLabel("Peak Range");
      peakRangeMarker.setLabelFont(new Font(null, Font.BOLD, 8));
      peakRangeMarker.setLabelAnchor(RectangleAnchor.TOP_LEFT);
      peakRangeMarker.setLabelTextAnchor(TextAnchor.CENTER_LEFT);
      Double maxDomain = (Double) tX.elementAt(pos);
      Marker maxDomainTarget = new ValueMarker(maxDomain);
      maxDomainTarget.setStroke(new BasicStroke(1.4f));
      maxDomainTarget.setPaint(Color.yellow);
      maxDomainTarget.setLabelOffsetType(LengthAdjustmentType.CONTRACT);
      maxDomainTarget.setLabel("Peak Domain");
      maxDomainTarget.setLabelFont(new Font(null, Font.BOLD, 8));
      maxDomainTarget.setLabelAnchor(RectangleAnchor.TOP_RIGHT);
      maxDomainTarget.setLabelTextAnchor(TextAnchor.CENTER_LEFT);
      inFocus.getXYPlot().addRangeMarker(peakRangeMarker);
      inFocus.getXYPlot().addDomainMarker(maxDomainTarget);
      inFocus.getXYPlot().removeRangeMarker(peakRangeMarker);
      inFocus.getXYPlot().removeDomainMarker(maxDomainTarget);
       */
    }//GEN-LAST:event_jToggleButton1ActionPerformed
 /**
  * this method converts vectors of doubles to strings
  * @param peak
  * @return string
  */
    private String[] convertDoubleToString(Vector<Double> peak) {
    String[] string = new String[peak.size()];
    for (int i = 0; i < peak.size(); i++) {
      string[i] = Double.toString(peak.get(i));
    }
    return string;
  }
    private void jList1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jList1MouseClicked
      // if right mouse button clicked (or me.isPopupTrigger())
      if (SwingUtilities.isRightMouseButton(evt) && !jList1.isSelectionEmpty() && jList1.locationToIndex(evt.getPoint()) == jList1.getSelectedIndex()) {
        jlistPopupMenu1.show(jList1, evt.getX(), evt.getY());
      }
    }//GEN-LAST:event_jList1MouseClicked

    private void CopyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CopyActionPerformed
      System.out.println("copy popup menu has been activated");
      jList1.getSelectedValue();
      jList1.getSelectedValues();

      System.out.println("copying the strin number  " + jList1.getSelectedValues());

    }//GEN-LAST:event_CopyActionPerformed

    private void ClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClearActionPerformed
      jList1.setModel(new DefaultListModel());
    }//GEN-LAST:event_ClearActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Back;
    private javax.swing.JMenuItem Clear;
    private javax.swing.JMenuItem Copy;
    private javax.swing.JLabel Max2theta;
    private javax.swing.JLabel MaxY;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JList jList1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JToggleButton jToggleButton1;
    private javax.swing.JPopupMenu jlistPopupMenu1;
    // End of variables declaration//GEN-END:variables
}
