/* ===========================================================
 * This file is part of Jpowder, see <http://www.jpowder.org/>
 * ===========================================================
 *
 * Jpowder is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * Jpowder is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * ---------
 * SmoothingPanel.java
 * ---------
 * (C) Copyright 2009-2010 STFC Rutherford Appleton Laboratories and
 * Kasem Bundit University.
 *
 * Author(s):  Kreecha Puphaiboon, Computer Science Lecturer, Kasem Bundit University
 *             Anders Marvardsen, ISIS, Rutherford Appleton Laboratory
 *
 * File change history is stored at: <http://code.google.com/p/jpowder/source/browse>
 *
 */

/*
 * SmoothingPanel.java
 *
 * Created on 18-Aug-2012, 15:13:40
 */
package org.jpowder.chartTools;

import java.awt.BorderLayout;
import java.awt.Cursor;
import javax.swing.JFrame;
import org.jpowder.Analysis.ToolsIcon3D;
import org.jpowder.InfoPanel;
import org.jpowder.Jpowder;
import org.jpowder.InternalFrame.JpowderInternalframe3D;
import javax.swing.SwingUtilities;
import org.jpowder.DataVisibleInChartPanel;

public class BiningPanel extends javax.swing.JPanel implements InfoPanel {

    private ToolsIcon3D toolsIcon3D;
    private SmoothingComboBoxModel model = new SmoothingComboBoxModel(
            new int[]{2, 4, 6});
    private Cursor waitCursor = new Cursor(Cursor.WAIT_CURSOR);
    private Cursor defaultCursor = new Cursor(Cursor.DEFAULT_CURSOR);
    private DataVisibleInChartPanel dataVisibleInChart;

    /** Creates new form SmoothingPanel */
    public BiningPanel() {
        initComponents();
        comboInput.setModel(model);
    }

    public BiningPanel(ToolsIcon3D aThis) {
        initComponents();
        comboInput.setModel(new SmoothingComboBoxModel(new int[]{2, 4, 6}));
        comboInput.setSelectedIndex(1);
        this.toolsIcon3D = aThis;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                JFrame frame = new JFrame("Smoothing Frame");
                BiningPanel bh = new BiningPanel();
                frame.add(bh, BorderLayout.CENTER);
                frame.setSize(800, 400);
                frame.setVisible(true);
                frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

            }
        });
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        comboInput = new javax.swing.JComboBox();
        executeButton = new javax.swing.JButton();
        backButton = new javax.swing.JButton();

        jLabel1.setText("Bining number factor:");

        comboInput.setMaximumRowCount(10);
        comboInput.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "2", "4", "6", "8" }));
        comboInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboInputActionPerformed(evt);
            }
        });

        executeButton.setText("execute");
        executeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                executeButtonActionPerformed(evt);
            }
        });

        backButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Back.PNG"))); // NOI18N
        backButton.setText("Back");
        backButton.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        backButton.setIconTextGap(2);
        backButton.setMargin(new java.awt.Insets(2, 0, 2, 0));
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1)
                        .addGap(4, 4, 4)
                        .addComponent(comboInput, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(136, 136, 136)
                        .addComponent(executeButton))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(backButton, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(125, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(comboInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(77, 77, 77)
                .addComponent(executeButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 69, Short.MAX_VALUE)
                .addComponent(backButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(63, 63, 63))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void executeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_executeButtonActionPerformed

        setCursor(waitCursor);
        executeButton.setText("Plotting . . . ");
        executeButton.setEnabled(false);
        // We're going to do something that takes a long time, so we spin off a thread and update the display when we're done.
        Thread worker = new Thread() {

            @Override
            public void run() {
                // Something that takes a long time. In real life, this might be a DB
                // query, remote method invocation, etc.
                try {
                    JpowderInternalframe3D inFocus = Jpowder.internalFrameInFocus3D;
                    int selectedValue = Integer.parseInt(comboInput.getSelectedItem().toString());

                    BinOptimizer bo = new BinOptimizer(selectedValue);
                    bo.execute(inFocus);

                    Thread.sleep(5000);
                } catch (InterruptedException ex) {
                }
                // Report the result using invokeLater( ).
                SwingUtilities.invokeLater(new Runnable() {

                    @Override
                    public void run() {
                        executeButton.setText("execute");
                        executeButton.setEnabled(true);
                        setCursor(defaultCursor);
                    }
                });
            }
        };
        worker.start(); // So we don't hold up the dispatch thread


    }//GEN-LAST:event_executeButtonActionPerformed

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed

        this.setVisible(false);
}//GEN-LAST:event_backButtonActionPerformed

    private void comboInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboInputActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButton;
    private javax.swing.JComboBox comboInput;
    private javax.swing.JButton executeButton;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables

    @Override
    public void update() {
    }

    /**
     * @return the dataVisibleInChart
     */
    public DataVisibleInChartPanel getDataVisibleInChart() {
        return dataVisibleInChart;
    }

    /**
     * @param dataVisibleInChart the dataVisibleInChart to set
     */
    public void setDataVisibleInChart(DataVisibleInChartPanel dataVisibleInChart) {
        this.dataVisibleInChart = dataVisibleInChart;
    }
}
