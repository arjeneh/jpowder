/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Peack.java
 *
 * Created on 26-Nov-2009, 11:32:11
 */
package org.jpowder.Analysis;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;

import javax.swing.JLabel;
import javax.swing.JPopupMenu;
import javax.swing.SwingUtilities;


import org.jdesktop.jxlayer.JXLayer;
import org.jfree.chart.ChartMouseEvent;
import org.jfree.chart.ChartMouseListener;
import org.jfree.chart.annotations.XYTextAnnotation;
import org.jfree.chart.plot.Marker;
import org.jfree.chart.plot.ValueMarker;
import org.jfree.data.xy.XYDataset;
import org.jfree.ui.TextAnchor;
import org.jpowder.InfoPanel;
import org.jpowder.JPowder;
import org.jpowder.JpowderInternalframe;
import org.jpowder.chartTools.Magnifier;

/**
 *
 * @author
 */
public class MarkPeakPosition extends javax.swing.JPanel implements InfoPanel, ChartMouseListener {

    private AnalysisIcon analysisIcon;
    private List<Marker> peakRangeMarker = new ArrayList<Marker>();
    private List<Marker> domainRangeMarker = new ArrayList<Marker>();
    private String[] string;
    private double x;
    private double y;

//  private String[] strings;
    /** Creates new form Peack */
    public MarkPeakPosition(AnalysisIcon analysisIcon) {
        initComponents();
        this.analysisIcon = analysisIcon;

    }

    public void update() {

        JpowderInternalframe inFocus = JPowder.internalFrameInFocus;
        jTextPeakArea.setText("");
        getPeakButt.setSelected(false);

        for (int i = 0; i < domainRangeMarker.size() && i < peakRangeMarker.size(); i++) {
            inFocus.getXYPlot().removeDomainMarker(domainRangeMarker.get(i));
        }
    }

    public JLabel getPeakLabel() {
        return peakLabel;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextAreaPopMenu = new javax.swing.JPopupMenu();
        copy = new javax.swing.JMenuItem();
        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        Back = new javax.swing.JButton();
        getPeakButt = new javax.swing.JToggleButton();
        peakLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextPeakArea = new javax.swing.JTextArea();
        removeAllButt = new javax.swing.JButton();
        removeButt = new javax.swing.JButton();

        copy.setText("Copy");
        copy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyActionPerformed(evt);
            }
        });
        jTextAreaPopMenu.add(copy);
        jTextAreaPopMenu.add(new JPopupMenu.Separator());

        jTextAreaPopMenu.getAccessibleContext().setAccessibleParent(jTextPeakArea);

        setMaximumSize(new java.awt.Dimension(274, 362));
        setPreferredSize(new java.awt.Dimension(274, 362));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel1.setText("Mark The Peak Position");

        Back.setText("Back");
        Back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackActionPerformed(evt);
            }
        });

        getPeakButt.setText("Get Peak ");
        getPeakButt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getPeakButtActionPerformed(evt);
            }
        });

        jTextPeakArea.setColumns(1);
        jTextPeakArea.setFont(new java.awt.Font("Arial", 1, 14));
        jTextPeakArea.setForeground(new java.awt.Color(255, 0, 51));
        jTextPeakArea.setLineWrap(true);
        jTextPeakArea.setTabSize(20);
        jTextPeakArea.setToolTipText("Value of 2Î¸ at a peak");
        jTextPeakArea.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTextPeakAreaMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(jTextPeakArea);

        removeAllButt.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        removeAllButt.setText("Remove All");
        removeAllButt.setToolTipText("Clear The Text Area");
        removeAllButt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeAllButtActionPerformed(evt);
            }
        });

        removeButt.setFont(new java.awt.Font("Tahoma", 0, 10));
        removeButt.setText("Remove");
        removeButt.setToolTipText("Remove Selected Item");
        removeButt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(peakLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 40, Short.MAX_VALUE)
                                .addComponent(jLabel1))
                            .addComponent(getPeakButt)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(removeAllButt)
                                .addGap(0, 0, 0)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(Back)
                                    .addComponent(removeButt))))
                        .addContainerGap())
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {removeAllButt, removeButt});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(peakLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 9, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(getPeakButt)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(removeAllButt)
                    .addComponent(removeButt))
                .addGap(18, 18, 18)
                .addComponent(Back)
                .addContainerGap(35, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {removeAllButt, removeButt});

    }// </editor-fold>//GEN-END:initComponents

    private void BackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackActionPerformed

        System.out.println("backbut is clicked");
        analysisIcon.setComponentZOrder(this, 0);
        analysisIcon.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_BackActionPerformed

    private void getPeakButtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getPeakButtActionPerformed

//        FilesPlotter.createLegend=true;// test to see if the legend can be set again


        JpowderInternalframe inFocus = JPowder.internalFrameInFocus;
        XYDataset dataset = inFocus.getXYPlot().getDataset();
        if (getPeakButt.isSelected() && inFocus == null) {
            javax.swing.JOptionPane.showMessageDialog(null, "There Is No Plotted Data");
        }

        if (getPeakButt.isSelected()) {



            inFocus.getChartPanel().addChartMouseListener(this);
            inFocus.getChartPanel().setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
            //Domain
            inFocus.getXYPlot().setDomainCrosshairVisible(true);
            inFocus.getXYPlot().setDomainCrosshairLockedOnData(true);
            inFocus.getXYPlot().setDomainCrosshairStroke(new BasicStroke(1f));
            inFocus.getXYPlot().setDomainCrosshairPaint(Color.ORANGE);
            inFocus.getChartPanel().setHorizontalAxisTrace(true);
            //Range
            inFocus.getXYPlot().setRangeCrosshairVisible(true);
            inFocus.getXYPlot().setRangeCrosshairLockedOnData(true);
            inFocus.getXYPlot().setRangeCrosshairStroke(new BasicStroke(1f));
            inFocus.getXYPlot().setRangeCrosshairPaint(Color.ORANGE);
            inFocus.getChartPanel().setVerticalAxisTrace(true);



            JXLayer layer = new JXLayer(inFocus.getChartPanel());
            Magnifier magnifier = new Magnifier();
            magnifier.setMagnifyingFactor(4);
            magnifier.setRadius(20);
            layer.setUI(magnifier);
            inFocus.setContentPane(layer);

        }
        if (!getPeakButt.isSelected()) {
            inFocus.getChartPanel().removeChartMouseListener(this);
            inFocus.getChartPanel().setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));

            //Domain
            inFocus.getXYPlot().setDomainCrosshairVisible(false);
            inFocus.getChartPanel().setHorizontalAxisTrace(false);
            inFocus.getXYPlot().setDomainCrosshairLockedOnData(false);

            for (int i = 0; i < domainRangeMarker.size() && i < peakRangeMarker.size(); i++) {
                inFocus.getXYPlot().removeRangeMarker(peakRangeMarker.get(i));
                inFocus.getXYPlot().removeDomainMarker(domainRangeMarker.get(i));
            }
            //Range
            inFocus.getXYPlot().setRangeCrosshairVisible(false);
            inFocus.getChartPanel().setVerticalAxisTrace(false);
            inFocus.getXYPlot().setRangeCrosshairLockedOnData(false);
            //Anotation
            inFocus.getXYPlot().clearAnnotations();
            //magnifier
            JXLayer layer = new JXLayer(inFocus.getChartPanel());
            Magnifier magnifier = new Magnifier();
            magnifier.setRadius(0);
            layer.setUI(magnifier);
            inFocus.setContentPane(layer);

        }
    }//GEN-LAST:event_getPeakButtActionPerformed
    /**
     * this method converts vectors of doubles to strings
     * @param peak
     * @return string
     */
    private String[] convertDoubleToString(Vector<Double> peak) {
        string = new String[peak.size()];
        for (int i = 0; i < peak.size(); i++) {
            string[i] = Double.toString(peak.get(i));

        }
        return string;
    }
    private void copyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyActionPerformed
        jTextPeakArea.copy();
    }//GEN-LAST:event_copyActionPerformed
    /**
     *
     * @param arg0
     */
    public void chartMouseClicked(ChartMouseEvent arg0) {
        SwingUtilities.invokeLater(new Runnable() {

            public void run() {
                JpowderInternalframe inFocus = JPowder.internalFrameInFocus;
                inFocus.getXYPlot().clearAnnotations();

                x = inFocus.getXYPlot().getDomainCrosshairValue();
                y = inFocus.getXYPlot().getRangeCrosshairValue();
                inFocus.addMarkedPeakPosition(x);
                final String[] strings = convertDoubleToString(inFocus.getMarkedPeakPosition());
                jTextPeakArea.setText("");
                for (int i = 0; i < strings.length; i++) {
                    jTextPeakArea.append(strings[i] + "\n");
                }

                XYTextAnnotation annotation = new XYTextAnnotation("(" + x + ", " + y + ")", x, y);
                annotation.setTextAnchor(TextAnchor.BOTTOM_CENTER);
                inFocus.getXYPlot().addAnnotation(annotation);


                ValueMarker rangeMarker = new ValueMarker(y);
                rangeMarker.setStroke(new BasicStroke(1.4f));
                rangeMarker.setPaint(Color.yellow);

                ValueMarker domainMarker = new ValueMarker(x);
                domainMarker.setStroke(new BasicStroke(1.4f));
                domainMarker.setPaint(Color.yellow);

                peakRangeMarker.add(rangeMarker);
                domainRangeMarker.add(domainMarker);

//        inFocus.getXYPlot().addRangeMarker(rangeMarker);
                inFocus.getXYPlot().addDomainMarker(domainMarker);



            }
        });
    }

    /**
     *
     * @param arg0
     */
    public void chartMouseMoved(ChartMouseEvent arg0) {
    }

    /**
     *
     * @return
     */
    public List<Marker> getPeakRangeMarker() {

        return peakRangeMarker;
    }

    /**
     *
     * @return
     */
    public List<Marker> getPeakDomainMarker() {
        return domainRangeMarker;
    }
    private void removeAllButtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeAllButtActionPerformed
        jTextPeakArea.setText("");
        JpowderInternalframe inFocus = JPowder.internalFrameInFocus;
        inFocus.removeAllMarkedPeakPosition();
        inFocus.getChartPanel().removeChartMouseListener(this);
        inFocus.getChartPanel().setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));

        //Domain
        inFocus.getXYPlot().setDomainCrosshairVisible(false);
        inFocus.getChartPanel().setHorizontalAxisTrace(false);
        inFocus.getXYPlot().setDomainCrosshairLockedOnData(false);

        for (int i = 0; i < domainRangeMarker.size() && i < peakRangeMarker.size(); i++) {
//        inFocus.getXYPlot().removeRangeMarker(peakRangeMarker.get(i));
            inFocus.getXYPlot().removeDomainMarker(domainRangeMarker.get(i));
        }
        //Range
        inFocus.getXYPlot().setRangeCrosshairVisible(false);
        inFocus.getChartPanel().setVerticalAxisTrace(false);
        inFocus.getXYPlot().setRangeCrosshairLockedOnData(false);
        //Anotation
        inFocus.getXYPlot().clearAnnotations();
        //magnifier
        JXLayer layer = new JXLayer(inFocus.getChartPanel());
        Magnifier magnifier = new Magnifier();
        magnifier.setRadius(0);
        layer.setUI(magnifier);
        inFocus.setContentPane(layer);

        getPeakButt.setSelected(false);

    }//GEN-LAST:event_removeAllButtActionPerformed

    private void removeButtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtActionPerformed

        JpowderInternalframe inFocus = JPowder.internalFrameInFocus;
        inFocus.removeMarkedPeakPosition(x);
        final String[] strings = convertDoubleToString(inFocus.getMarkedPeakPosition());
        jTextPeakArea.setText("");

        inFocus.getXYPlot().removeDomainMarker(domainRangeMarker.get(domainRangeMarker.size() - 1));

        for (int i = 0; i < strings.length; i++) {
            jTextPeakArea.append(strings[i] + "\n");
        }


    }//GEN-LAST:event_removeButtActionPerformed

    private void jTextPeakAreaMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextPeakAreaMouseReleased
        showPopup(evt);
    }//GEN-LAST:event_jTextPeakAreaMouseReleased
    private void showPopup(MouseEvent e) {
        if (e.isPopupTrigger()) {
            jTextAreaPopMenu.show(e.getComponent(), e.getX(), e.getY());
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Back;
    private javax.swing.JMenuItem copy;
    private javax.swing.JToggleButton getPeakButt;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JPopupMenu jTextAreaPopMenu;
    private javax.swing.JTextArea jTextPeakArea;
    private javax.swing.JLabel peakLabel;
    private javax.swing.JButton removeAllButt;
    private javax.swing.JButton removeButt;
    // End of variables declaration//GEN-END:variables
}

