package org.jpowder;

import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.Transferable;
import java.awt.dnd.DnDConstants;

/*
 * FileChooserPanel.java
 *
 * Created on 21 May 2007, 09:53
 */
import java.awt.dnd.DropTargetListener;
import java.io.File;
import java.util.Vector;
import javax.swing.DefaultListModel;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.event.ListSelectionListener;

/**
 *
 * @author  Kreecha Puphaiboon
 */
public class FileChooserPanel extends javax.swing.JPanel implements ListSelectionListener, DropTargetListener {
    
    private JPowder jpowder;
    private java.awt.dnd.DropTarget dt;
    
    private Vector<File> fileToReadVector = new Vector<File>();//all actual xye files.
    private Vector data;
    private DefaultListModel listModel;
    private static final String[] ACCEPTED_FILE_TYPE = {"xye", "txt"};//list of acceptable file types    
    
    /** Creates new form FileChooserPanel
     * @param jp JPowder
     */
    public FileChooserPanel(JPowder jp) {
        jpowder = jp;
        initComponents();
        
        //create a list model to put in the JList
        listModel = new javax.swing.DefaultListModel();
        //listModel.addListDataListener(new MyListDataListener());
        
        file_lst.setModel(listModel);
        file_lst.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        file_lst.addListSelectionListener(this);
        
        dt = new java.awt.dnd.DropTarget(this.file_lst, this);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        file_sp = new javax.swing.JScrollPane();
        file_lst = new javax.swing.JList();

        addFile_btn = new javax.swing.JButton();
        deleteFile_btn = new javax.swing.JButton();

        setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(""), "File Selection Panel (Drop file here)", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(102, 102, 102)));
        setMinimumSize(new java.awt.Dimension(265, 140));
        setPreferredSize(new java.awt.Dimension(265, 140));
        setLayout(new java.awt.GridBagLayout());

        file_sp.setMinimumSize(new java.awt.Dimension(260, 84));
        file_sp.setPreferredSize(new java.awt.Dimension(260, 84));

        file_lst.setFont(new java.awt.Font("Tahoma", 0, 10));
        file_lst.setMinimumSize(new java.awt.Dimension(210, 84));
        file_lst.setPreferredSize(new java.awt.Dimension(210, 84));
        file_sp.setViewportView(file_lst);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 0);
        add(file_sp, gridBagConstraints);

        addFile_btn.setFont(new java.awt.Font("Tahoma", 0, 10));
        addFile_btn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/addFile.gif"))); // NOI18N
        addFile_btn.setText("Add file");
        addFile_btn.setToolTipText("Add file");
        addFile_btn.setMaximumSize(new java.awt.Dimension(120, 23));
        addFile_btn.setMinimumSize(new java.awt.Dimension(120, 23));
        addFile_btn.setPreferredSize(new java.awt.Dimension(120, 23));
        addFile_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addFile_btnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 2);
        add(addFile_btn, gridBagConstraints);

        deleteFile_btn.setFont(new java.awt.Font("Tahoma", 0, 10));
        deleteFile_btn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/del_small.gif"))); // NOI18N
        deleteFile_btn.setText("Delete file");
        deleteFile_btn.setToolTipText("Delete file");
        deleteFile_btn.setMaximumSize(new java.awt.Dimension(50, 23));
        deleteFile_btn.setMinimumSize(new java.awt.Dimension(50, 23));
        deleteFile_btn.setPreferredSize(new java.awt.Dimension(50, 23));
        deleteFile_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteFile_btnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 2);
        add(deleteFile_btn, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents
    
    /** ALL DRAGE AND DROP THING */
    public void dragEnter(java.awt.dnd.DropTargetDragEvent dtde) {
        //System.out.println("Drag Enter");
    }
    
    public void dragExit(java.awt.dnd.DropTargetEvent dte) {
        System.out.println("Source: " + dte.getSource());
        //System.out.println("Drag Exit");
    }
    
    public void dragOver(java.awt.dnd.DropTargetDragEvent dtde) {
        //System.out.println("Drag Over");
    }
    
    public void dropActionChanged(java.awt.dnd.DropTargetDragEvent dtde) {
        //System.out.println("Drop Action Changed");
    }
    
    public void drop(java.awt.dnd.DropTargetDropEvent dtde) {
        try {
            // Ok, get the dropped object and try to figure out what it is
            Transferable tr = dtde.getTransferable();
            DataFlavor[] flavors = tr.getTransferDataFlavors();
            
            for (int i = 0; i < flavors.length; i++) {
                System.out.println("Possible flavor: " + flavors[i].getMimeType());
                // Check for file lists specifically
                if (flavors[i].isFlavorJavaFileListType()) {
                    // Great!  Accept copy drops...
                    dtde.acceptDrop(DnDConstants.ACTION_COPY);
                    System.out.println("Successful file list drop.\n\n");
                    
                    // And add the list of file names to our text area
                    java.util.List list = (java.util.List)tr.getTransferData(flavors[i]);
                    
                    for (int j = 0; j < list.size(); j++) {
                        File file = (File)list.get(j);
                        String fileName = file.getName().toLowerCase();
                        
                        if (checkAcceptedFileType(fileName)){
                            this.data = ReadWriteFileUtil.getLocalFileToTable(file, jpowder);
                            if(this.data != null){
                                jpowder.setDataMatrix(this.data);
                                jpowder.setCurrentFileName(fileName);
                                jpowder.drawTable(this.data);
                                
                                this.fileToReadVector.addElement(file);//was filename (String type)
                                this.listModel.addElement(fileName);//add to DefaultListModel
                            }
                        } else {
                            javax.swing.JOptionPane.showMessageDialog(jpowder, "Only ASCII file please.");
                            //end if extension matched
                        }
                    }
                    
                    // If we made it this far, everything worked.
                    dtde.dropComplete(true);
                    return;
                }
            }
            // Hmm, the user must not have dropped a file list
            System.out.println("Drop failed: " + dtde);
            dtde.rejectDrop();
        } catch (Exception e) {
            e.printStackTrace();
            dtde.rejectDrop();
        }
    }
    //END ALL DRAGE AND DROP
    
    /*Checking whether file type is allowed
     *@ param filenames
     **/
    public boolean checkAcceptedFileType(String filenames){
        boolean result = true;
        for(int i = ACCEPTED_FILE_TYPE.length-1; i>=0;i--){
            if(filenames.endsWith(ACCEPTED_FILE_TYPE[i])){//ternary ?:
                //System.out.println("\nAccepted File Type.");
                result = true;
            } else{
                result = false;
            }
        }//end for
        return result;
    }//end checkAcceptedFileType
    
private void deleteFile_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteFile_btnActionPerformed
    //if no nothing selected then alert.
    if (file_lst.getSelectedIndex() == -1) {
        javax.swing.JOptionPane.showMessageDialog(jpowder, "To delete, please select a file first.");
        return;
    }
    
    //if the list is empty then do nothing
    if (this.listModel.getSize() <= 0) {
        javax.swing.JOptionPane.showMessageDialog(jpowder, "Please add a file first.");
        return;
    }
    
    //do the actual deletion.
    if (this.listModel.getSize() > 0){
        int index = file_lst.getSelectedIndex();
        this.listModel.removeElementAt(index);
        this.fileToReadVector.removeElementAt(index);
    }
}//GEN-LAST:event_deleteFile_btnActionPerformed

private void addFile_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addFile_btnActionPerformed
    // Browse for a file on user machine
    // Create a list of files to be choosen and keep the actual data in fileToReadVector.
    // restrict to .xye to be read.
    
    final JFileChooser fc = new JFileChooser();
    fc.addChoosableFileFilter(new AcceptFileFilter(ACCEPTED_FILE_TYPE, "ASCII file (*.xye, *.txt)"));
    fc.setAcceptAllFileFilterUsed(false);//only ASCII will be seen.
    
    int returnVal = fc.showOpenDialog(jpowder);
    
    if (returnVal == JFileChooser.APPROVE_OPTION) {
        File file = fc.getSelectedFile();
        String filename = file.getName().toLowerCase();
        
        //This is a real application would restrict to 'xye'.
        if (checkAcceptedFileType(filename)){
            this.data = ReadWriteFileUtil.getLocalFileToTable(file, jpowder);
            if(this.data != null){
                jpowder.setDataMatrix(this.data);
                jpowder.setCurrentFileName(filename);
                jpowder.drawTable(this.data);                
                fileToReadVector.addElement(file);//was filename (String type)
                listModel.addElement(filename);//add to DefaultListModel
            }
        } else {
            javax.swing.JOptionPane.showMessageDialog(jpowder, "Only ASCII file please.");
            //end if extension matched
        }
    } 
}//GEN-LAST:event_addFile_btnActionPerformed

public JButton getAddFile_btn() {
    return addFile_btn;
}

public void setAddFile_btn(JButton addFile_btn) {
    this.addFile_btn = addFile_btn;
}

public JButton getDeleteFile_btn() {
    return deleteFile_btn;
}

public void setDeleteFile_btn(JButton deleteFile_btn) {
    this.deleteFile_btn = deleteFile_btn;
}
//Detecting what user's selected in the JList.
public void valueChanged(javax.swing.event.ListSelectionEvent e) {
    //javax.swing.event.ListSelectionModel lsm = (javax.swing.event.ListSelectionModel)e.getSource();
    if (e.getValueIsAdjusting() == false) {
        if (file_lst.getSelectedIndex() == -1) {
            return;
        } else {
            int selected = file_lst.getSelectedIndex();
            jpowder.currentFileName = file_lst.getSelectedValue().toString();
            this.data = ReadWriteFileUtil.getLocalFileToTable((File)fileToReadVector.get(selected), jpowder);
            if(this.data != null){
                jpowder.drawTable(this.data);
            }
        }
    }
}//end valueChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addFile_btn;
    private javax.swing.JButton deleteFile_btn;
    private javax.swing.JList file_lst;
    private javax.swing.JScrollPane file_sp;
    // End of variables declaration//GEN-END:variables
    
}
