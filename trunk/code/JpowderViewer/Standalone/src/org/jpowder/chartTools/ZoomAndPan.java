/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ZoomAndPan.java
 *
 * Created on Dec 17, 2009, 2:53:21 PM
 */
package org.jpowder.chartTools;

import java.awt.BorderLayout;
import java.awt.Cursor;
import java.awt.event.AdjustmentEvent;
import java.awt.event.AdjustmentListener;
import javax.swing.ButtonGroup;
import javax.swing.JScrollBar;
import org.jfree.chart.axis.NumberAxis;
import org.jpowder.InfoPanel;
import org.jpowder.JPowder;
import org.jpowder.JpowderInternalframe;

/**
 *
 * @author Arjeneh
 */
public class ZoomAndPan extends javax.swing.JPanel implements InfoPanel, AdjustmentListener {

    private ChartToolsIcon chartToolsIcon;
    private static final double ZOOM_FACTOR = 10000;
    private double lowerBound;
    private double upperBound;
    private NumberAxis domainAxis;
    private ButtonGroup buttonGroup = new ButtonGroup();
//  private JScrollBar jScrollBar= new JScrollBar(JScrollBar.HORIZONTAL);

    /**
     *
     * @param chartToolsIcon
     */
    public ZoomAndPan(ChartToolsIcon chartToolsIcon) {
        initComponents();
        this.chartToolsIcon = chartToolsIcon;
    }

    public void update() {
        JpowderInternalframe inFocus = JPowder.internalFrameInFocus;

        jCheckBoxDomain.setSelected(false);

        //System.out.println("In Update" + inFocus);

    }

    public void adjustmentValueChanged(AdjustmentEvent e) {
        // this method is called when the scrollbar changes
        int x = e.getValue();
        System.out.println("x" + x);
        domainAxis.setRange(lowerBound + x , upperBound+x );

    }

    /**
     * Sets the pan mode.
     *
     * @param val  a boolean.
     */
    private void setPanMode(boolean val) {

        JpowderInternalframe inFocus = JPowder.internalFrameInFocus;
        if (val) {
            inFocus.getChartPanel().setCursor(Cursor.getPredefinedCursor(Cursor.MOVE_CURSOR));

        } else {
            inFocus.getChartPanel().setCursor(Cursor.getDefaultCursor());
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        backButt = new javax.swing.JButton();
        jToggleButton2 = new javax.swing.JToggleButton();
        moveButt = new javax.swing.JToggleButton();
        reserButt = new javax.swing.JToggleButton();
        jCheckBoxDomain = new javax.swing.JCheckBox();
        jCheckBoxRange = new javax.swing.JCheckBox();
        zoomIn = new javax.swing.JToggleButton();
        zoomOut = new javax.swing.JToggleButton();

        setPreferredSize(new java.awt.Dimension(297, 347));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel1.setText("Zoom And Pan");

        backButt.setText("Back");
        backButt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtActionPerformed(evt);
            }
        });

        jToggleButton2.setText("pan");

        moveButt.setText("Move");
        moveButt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveButtActionPerformed(evt);
            }
        });

        reserButt.setText("Reset");
        reserButt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reserButtActionPerformed(evt);
            }
        });

        jCheckBoxDomain.setText("Zoom in X Axis");

        jCheckBoxRange.setText("Zoom in Y Axis");

        buttonGroup.add(zoomIn);
        zoomIn.setFont(new java.awt.Font("Arial Narrow", 1, 12)); // NOI18N
        zoomIn.setText("+");
        zoomIn.setMinimumSize(new java.awt.Dimension(30, 25));
        zoomIn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                zoomInMousePressed(evt);
            }
        });
        zoomIn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zoomInActionPerformed(evt);
            }
        });

        buttonGroup.add(zoomOut);
        zoomOut.setFont(new java.awt.Font("Arial Narrow", 1, 12)); // NOI18N
        zoomOut.setText("-");
        zoomOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zoomOutActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(144, 144, 144)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jCheckBoxRange)
                            .addComponent(jCheckBoxDomain)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(jToggleButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(104, 104, 104)
                        .addComponent(backButt))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(reserButt, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, 0)
                                .addComponent(moveButt)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(zoomOut)
                                .addGap(0, 0, 0)
                                .addComponent(zoomIn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(33, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {zoomIn, zoomOut});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {moveButt, reserButt});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(27, 27, 27)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(95, 95, 95)
                        .addComponent(jToggleButton2))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jCheckBoxDomain)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jCheckBoxRange)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(reserButt)
                    .addComponent(moveButt)
                    .addComponent(zoomOut)
                    .addComponent(zoomIn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(100, 100, 100)
                .addComponent(backButt)
                .addGap(26, 26, 26))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {zoomIn, zoomOut});

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {moveButt, reserButt});

    }// </editor-fold>//GEN-END:initComponents

    private void backButtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtActionPerformed
        System.out.println("backbutt has been cliked");
        chartToolsIcon.setComponentZOrder(this, 1);
        chartToolsIcon.add(this);
        chartToolsIcon.setVisible(true);

    }//GEN-LAST:event_backButtActionPerformed

    private void moveButtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveButtActionPerformed

        if (moveButt.isSelected()) {
            setPanMode(true);
        }

        if (!moveButt.isSelected()) {
            setPanMode(false);
        }
    }//GEN-LAST:event_moveButtActionPerformed

    private void reserButtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reserButtActionPerformed
        JpowderInternalframe inFocus = JPowder.internalFrameInFocus;
        inFocus.getChartPanel().restoreAutoBounds();
        reserButt.setSelected(false);
    }//GEN-LAST:event_reserButtActionPerformed

    private void zoomOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zoomOutActionPerformed
        JpowderInternalframe inFocus = JPowder.internalFrameInFocus;
        inFocus.getChartPanel().setZoomOutFactor(1.1);
        getScrollBar();
        if (jCheckBoxDomain.isSelected()) {
            inFocus.getChartPanel().zoomOutDomain(0, 0);
        }
        if (jCheckBoxRange.isSelected()) {
            inFocus.getChartPanel().zoomOutRange(ZOOM_FACTOR, ZOOM_FACTOR);
        }
        if (jCheckBoxDomain.isSelected() && jCheckBoxRange.isSelected()) {
            inFocus.getChartPanel().zoomOutBoth(ZOOM_FACTOR, ZOOM_FACTOR);
        }


    }//GEN-LAST:event_zoomOutActionPerformed

    private void zoomInActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zoomInActionPerformed
        JpowderInternalframe inFocus = JPowder.internalFrameInFocus;
        inFocus.getChartPanel().setZoomInFactor(0.9);
        getScrollBar();

        if (jCheckBoxDomain.isSelected()) {
            inFocus.getChartPanel().zoomInDomain(0, 0);
        }
        if (jCheckBoxRange.isSelected()) {
            inFocus.getChartPanel().zoomInRange(ZOOM_FACTOR, ZOOM_FACTOR);
        }
        if (jCheckBoxDomain.isSelected() && jCheckBoxRange.isSelected()) {
            inFocus.getChartPanel().zoomInBoth(ZOOM_FACTOR, ZOOM_FACTOR);
        }
}//GEN-LAST:event_zoomInActionPerformed

    private void zoomInMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_zoomInMousePressed
    }//GEN-LAST:event_zoomInMousePressed
    private JScrollBar getScrollBar() {
        JpowderInternalframe inFocus = JPowder.internalFrameInFocus;
        JScrollBar scrollBar = new JScrollBar(JScrollBar.HORIZONTAL, 50, 10, 0, 100);
        scrollBar.addAdjustmentListener(this);

        domainAxis = (NumberAxis) inFocus.getXYPlot().getDomainAxis();
        System.out.println("Lower Bound: " + domainAxis.getRange().getLowerBound());
        System.out.println("Upper Bound: " + domainAxis.getRange().getUpperBound());
        lowerBound = domainAxis.getLowerBound();
        upperBound = domainAxis.getUpperBound();
        inFocus.getContentPane().add(scrollBar, BorderLayout.SOUTH);
        inFocus.updateUI();
        return scrollBar;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButt;
    private javax.swing.JCheckBox jCheckBoxDomain;
    private javax.swing.JCheckBox jCheckBoxRange;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JToggleButton jToggleButton2;
    private javax.swing.JToggleButton moveButt;
    private javax.swing.JToggleButton reserButt;
    private javax.swing.JToggleButton zoomIn;
    private javax.swing.JToggleButton zoomOut;
    // End of variables declaration//GEN-END:variables
}
